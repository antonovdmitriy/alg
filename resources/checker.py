

import json
import os

def validate_and_count(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Ñ–∞–π–ª–µ {filepath}: {e}")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å {filepath}: {e}")
        return None

    if not isinstance(data, list):
        print(f"‚ùå {filepath} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return None

    total_categories = len(data)
    total_words = 0
    total_examples = 0

    for category in data:
        if not isinstance(category, dict) or "entries" not in category:
            print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {category}")
            return None
        total_words += len(category["entries"])
        for entry in category["entries"]:
            if not isinstance(entry, dict) or "examples" not in entry:
                print(f"‚ùå –°–ª–æ–≤–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {entry}")
                return None
            total_examples += len(entry["examples"])

    print("‚úÖ JSON —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
    print(f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {total_categories}")
    print(f"üóÇÔ∏è –°–ª–æ–≤: {total_words}")
    print(f"üí¨ –ü—Ä–∏–º–µ—Ä–æ–≤: {total_examples}")

if __name__ == "__main__":
    filepath = "word_translated.json"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ —Å–≤–æ–µ–º—É —Ñ–∞–π–ª—É
    validate_and_count(filepath)
